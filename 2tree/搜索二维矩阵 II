搜索二维矩阵 II
leetcode 240
编写一个高效的算法来搜索m x n矩阵 matrix 中的一个目标值 target 。该矩阵具有以下特性：

每行的元素从左到右升序排列。
每列的元素从上到下升序排列。

输入：matrix = [[1,4,7,11,15],[2,5,8,12,19],[3,6,9,16,22],[10,13,14,17,24],[18,21,23,26,30]], target = 5
输出：true

分析：暴力法O(n^2)时间复杂度小于O(n^2)

//dfs超时

class Solution {
private:
    bool flag;
    void dfs(vector<vector<int>>& matrix, vector<vector<int>>& search,int target,int x,int y,int n,int m){
        if(flag) return ;
        if(x>=n||y>=m||x<0||y<0) return ;
        if(search[x][y]) return ;
        search[x][y]=1;
        if(matrix[x][y]==target) flag= true;
        else{
            dfs(matrix,search,target,x+1,y,n,m);
            dfs(matrix,search,target,x,y+1,n,m);
        }
    }
public:
    bool searchMatrix(vector<vector<int>>& matrix, int target) {
        int n = matrix.size();
        int m = matrix[0].size();
        flag = false;
        vector<vector<int>> search(n,vector<int>(m,0));
        dfs(matrix,search,target,0,0,n,m);
        return flag;

    }
};

//二叉搜索树从右上角开始形成抽象搜索2叉树
if(target>matrix[i][j]){
    j--;
}else if(target<matrix[i][j]){
    i++
}else{
    return ture;
}
return false;





