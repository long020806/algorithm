/**
*	leetcode 1567 乘积为正数的最长子数组长度
*/
给你一个整数数组 nums ，请你求出乘积为正数的最长子数组的长度。

一个数组的子数组是由原数组中零个或者更多个连续数字组成的数组。

请你返回乘积为正数的最长子数组长度。

输入：nums = [1,-2,-3,4]
输出：4
解释：数组本身乘积就是正数，值为 24 。

输入：nums = [0,1,-2,-3,-4]
输出：3
解释：最长乘积为正数的子数组为 [1,-2,-3] ，乘积为 6 。
注意，我们不能把 0 也包括到子数组中，因为这样乘积为 0 ，不是正数。

输入：nums = [-1,-2,-3,0,1]
输出：2
解释：乘积为正数的最长子数组是 [-1,-2] 或者 [-2,-3] 。

分析
记录上次为负数的地点 front dp[i] = dp[front-1] + i-front+1? nums[i]<=0; max = max(dp[front])??
								 dp[i-1]+1 nums[i]>0
								 0 font = 0?num[i]=0;
front =0 front =2 front =0;
0 1 -2 -3 4 
0 1 0 3 4
0 1 
first = 0 second = 1;maxL = 1;front =0;last =0; i = 1;
first =1 second = 0 maxL = 1 front = 2 last = 1 i =2;
first =0 second = 3 maxL = 3 front = 0 last = 0 i =3;
first =3 second = 4 maxL = 4 front = 0 last = 0 i =4;



////已ac
class Solution {
public:
    int getMaxLen(vector<int>& nums) {
        int n =nums.size();
        vector<int> dp(n+1,0);
        int front = 0;
        int maxL = 0;
        for(int i=1;i<=n;i++){
            if(front&&nums[i-1]<0){
                dp[i] = dp[front-1] + i-front+1;
                front =0;
            }
            if(nums[i-1]<0&&!front) front = i;
            if(nums[i-1]==0){
                dp[i]=0;
                front =0;
            } 
            if(nums[i-1]>0) dp[i] = dp[i-1]+1;
            maxL = max(maxL,dp[i]);
        }
        return maxL;
    }
};
//优化空间
class Solution {
public:
    int getMaxLen(vector<int>& nums) {
        int n =nums.size();
        int front = nums[0]<0?1:0;
        int maxL = nums[0]>0?1:0;
        int last = 0;
        int first=0,second=nums[0]>0?1:0;
		for(int i=2;i<=n;i++){
            first = second;
            if(nums[i-1]<0){
                if(front) second = last + i-front+1;
                else second = 0;
                front =i;
                last =first;
            }
            if(nums[i-1]==0){
                second =0;
                front =0;
            } 
            
            if(nums[i-1]>0)	second = second+1;
            maxL = max(maxL,second);
            //printf("first:%d second:%d maxL:%d front:%d last:%d\n",first,second,maxL,front,last);
		}
        return maxL;
    }
};
1 1 1 1
first = 0;
second = 1;
