/**
*	leetcode 55 跳跃游戏
*
*/
题目:
给定一个非负整数数组 nums ，你最初位于数组的 第一个下标 。
数组中的每个元素代表你在该位置可以跳跃的最大长度。
判断你是否能够到达最后一个下标。

输入：nums = [2,3,1,1,4]
输出：true
解释：可以先跳 1 步，从下标 0 到达下标 1, 然后再从下标 1 跳 3 步到达最后一个下标。
//分析
nums = [2,3,0,0,2]
pre =0;
cur = pre + nums[pre];

dp = [0,0,0,0,0,0]
dp[i] 表示是否可以到达i节点 dp[i] = i <= nums[i-1...0]+i && dp[i-1...0];
									i<=nums[i-1...0] <=>i<=max(nums[i]+i,dp[i-1])小于之前能到达的所有距离等同于小于之前的可达的最大值和当前能走的最大值；
自己解法:
class Solution {
public:
    bool canJump(vector<int>& nums) {
        int n= nums.size();
        vector<int> dp(n+1,0);
        dp[0]=1;
        for(int i=0;i<n;i++){
            if(dp[i]){
                for(int j=0;j<=nums[i];j++){
                    if(i+j<n)
                        dp[i+j]=1;
                    if(dp[n-1]==1) return true;
                }
            }
            if(dp[n-1]==1) return true;
        }
        return false;
    }
};												

题解：
class Solution {
public:
    bool canJump(vector<int>& nums) {
        int n= nums.size();
        int maxDistance =0;
        for(int i=0;i<n;i++){
            if(i<=maxDistance){
                maxDistance = max(maxDistance,i+nums[i]);
                if(maxDistance>=n-1) return true;
            }
        }
        return false;
    }
};

//
dp[0]=i-1					
dp[i] = i<=max(dp[i-1],i+nums[i]);存在dp[i]>=n-1 ;
