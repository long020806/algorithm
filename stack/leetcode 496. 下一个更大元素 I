leetcode 496. 下一个更大元素 I
给你两个 没有重复元素 的数组 nums1 和 nums2 ，其中nums1 是 nums2 的子集。

请你找出 nums1 中每个元素在 nums2 中的下一个比其大的值。

nums1 中数字 x 的下一个更大元素是指 x 在 nums2 中对应位置的右边的第一个比 x 大的元素。如果不存在，对应位置输出 -1 。

 

示例 1:

输入: nums1 = [4,1,2], nums2 = [1,3,4,2].
输出: [-1,3,-1]
解释:
    对于 num1 中的数字 4 ，你无法在第二个数组中找到下一个更大的数字，因此输出 -1 。
    对于 num1 中的数字 1 ，第二个数组中数字1右边的下一个较大数字是 3 。
    对于 num1 中的数字 2 ，第二个数组中没有下一个更大的数字，因此输出 -1 。

    //暴力循环nums1 在nums2找 
    for(int i=0;i<n;i++){
    	int j;
    	for(j=map[nums1[i]]+1;j<m;j++){
    		if(nums2[j]>nums1[i]) break;
    	}
    	if(j==m) {
    		push(-1)
    	}else{
    		push(nums2[j]);
    	}
    }
    //单调栈+hash O(m+n)
    class Solution {
public:
    vector<int> nextGreaterElement(vector<int>& nums1, vector<int>& nums2) {
        unordered_map<int,int> hashmap;
        stack<int> st;
        for (int i = nums2.size() - 1; i >= 0; --i) {
            int num = nums2[i];
            while (!st.empty() && num >= st.top()) {
                st.pop();
            }
            hashmap[num] = st.empty() ? -1 : st.top();
            st.push(num);
        }
        vector<int> res(nums1.size());
        for (int i = 0; i < nums1.size(); ++i) {
            res[i] = hashmap[nums1[i]];
        }
        return res;
    }
};

当题目出现「找到最近一个比其大的元素」的字眼时，自然会想到「单调栈」。

具体的，由于我们目标是找到某个数其在 nums2nums2 的右边中第一个比其大的数，因此我们可以对 nums2nums2 进行逆序遍历。

我们在遍历 nums2nums2 时，实时维护一个单调栈，当我们遍历到元素 nums2[i]nums2[i] 时，可以先将栈顶中比 nums2[i]nums2[i] 小的元素出栈，最终结果有两种可能：

栈为空，说明 nums2[i]nums2[i] 之前（右边）没有比其大的数；

栈不为空， 此时栈顶元素为 nums2[i]nums2[i] 在 nums2nums2 中（右边）最近的比其大的数。

再利用数组中数值各不相同，在遍历 nums2nums2 的同时，使用哈希表记录每个 nums2[i]nums2[i] 对应目标值是多少即可

